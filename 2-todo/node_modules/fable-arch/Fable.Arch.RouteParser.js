var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { setType } from "fable-core/Symbol";
import _Symbol from "fable-core/Symbol";
import { equals, compareUnions, equalsUnions, GenericParam } from "fable-core/Util";
import { isNullOrEmpty, fsFormat } from "fable-core/String";
import { tryPick, item, reduce, rangeChar, toList, exists } from "fable-core/Seq";
import { ofArray, concat, reverse, map as map_1 } from "fable-core/List";
import List from "fable-core/List";
export var Parsing = function (__exports) {
    var Result = __exports.Result = function () {
        function Result(caseName, fields) {
            _classCallCheck(this, Result);

            this.Case = caseName;
            this.Fields = fields;
        }

        _createClass(Result, [{
            key: _Symbol.reflection,
            value: function () {
                return {
                    type: "Fable.Arch.RouteParser.Parsing.Result",
                    interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
                    cases: {
                        Failure: [GenericParam("b")],
                        Success: [GenericParam("a")]
                    }
                };
            }
        }, {
            key: "Equals",
            value: function (other) {
                return equalsUnions(this, other);
            }
        }, {
            key: "CompareTo",
            value: function (other) {
                return compareUnions(this, other);
            }
        }]);

        return Result;
    }();

    setType("Fable.Arch.RouteParser.Parsing.Result", Result);

    var Parser = __exports.Parser = function () {
        function Parser(parseFn, label) {
            _classCallCheck(this, Parser);

            this.parseFn = parseFn;
            this.label = label;
        }

        _createClass(Parser, [{
            key: _Symbol.reflection,
            value: function () {
                return {
                    type: "Fable.Arch.RouteParser.Parsing.Parser",
                    interfaces: ["FSharpRecord"],
                    properties: {
                        parseFn: "function",
                        label: "string"
                    }
                };
            }
        }]);

        return Parser;
    }();

    setType("Fable.Arch.RouteParser.Parsing.Parser", Parser);

    var printResult = __exports.printResult = function (result) {
        if (result.Case === "Failure") {
            var label = result.Fields[0][0];
            var error = result.Fields[0][1];
            fsFormat("Error parsing %s\n%s")(function (x) {
                console.log(x);
            })(label)(error);
        } else {
            var value = result.Fields[0][0];
            var input = result.Fields[0][1];
            fsFormat("%A")(function (x) {
                console.log(x);
            })(value);
        }
    };

    var satisfy = __exports.satisfy = function (predicate, label) {
        var innerFn = function innerFn(input) {
            return isNullOrEmpty(input) ? new Result("Failure", [[label, "No more input"]]) : function () {
                var first = input[0];

                if (predicate(first)) {
                    var remainingInput = input.substr(1);
                    return new Result("Success", [[first, remainingInput]]);
                } else {
                    var err = fsFormat("Unexpected '%c'")(function (x) {
                        return x;
                    })(first);
                    return new Result("Failure", [[label, err]]);
                }
            }();
        };

        return new Parser(innerFn, label);
    };

    var pchar = __exports.pchar = function (charToMatch) {
        var predicate = function predicate(ch) {
            return ch === charToMatch;
        };

        var label = fsFormat("%c")(function (x) {
            return x;
        })(charToMatch);
        return satisfy(predicate, label);
    };

    var digitChar = __exports.digitChar = function () {
        var predicate = function predicate(c) {
            return function (source) {
                return exists(function (x) {
                    return equals(c, x);
                }, source);
            }(toList(rangeChar("0", "9")));
        };

        var label = "digit";
        return satisfy(predicate, label);
    }();

    var run = __exports.run = function (parser, input) {
        return parser.parseFn(input);
    };

    var getLabel = __exports.getLabel = function (parser) {
        return parser.label;
    };

    var setLabel = __exports.setLabel = function (parser, newLabel) {
        var newInnerFn = function newInnerFn(input) {
            var result = parser.parseFn(input);

            if (result.Case === "Failure") {
                var oldLabel = result.Fields[0][0];
                var err = result.Fields[0][1];
                return new Result("Failure", [[newLabel, err]]);
            } else {
                return new Result("Success", [result.Fields[0]]);
            }
        };

        return new Parser(newInnerFn, newLabel);
    };

    var op_LessQmarkGreater = __exports.op_LessQmarkGreater = function () {
        return function (parser) {
            return function (newLabel) {
                return setLabel(parser, newLabel);
            };
        };
    };

    var bindP = __exports.bindP = function (f, p) {
        var label = "unknown";

        var innerFn = function innerFn(input) {
            var result1 = run(p, input);

            if (result1.Case === "Success") {
                var value1 = result1.Fields[0][0];
                var remainingInput = result1.Fields[0][1];
                var p2 = f(value1);
                return run(p2, remainingInput);
            } else {
                var label_1 = result1.Fields[0][0];
                var err = result1.Fields[0][1];
                return new Result("Failure", [[label_1, err]]);
            }
        };

        return new Parser(innerFn, label);
    };

    var op_GreaterGreaterEquals = __exports.op_GreaterGreaterEquals = function (p, f) {
        return bindP(f, p);
    };

    var returnP = __exports.returnP = function (x) {
        var label = fsFormat("%A")(function (x) {
            return x;
        })(x);

        var innerFn = function innerFn(input) {
            return new Result("Success", [[x, input]]);
        };

        return new Parser(innerFn, label);
    };

    var mapP = __exports.mapP = function (f) {
        var f_1 = function f_1($var15) {
            return function (x) {
                return returnP(x);
            }(f($var15));
        };

        return function (p) {
            return bindP(f_1, p);
        };
    };

    var op_LessBangGreater = __exports.op_LessBangGreater = function () {
        return function (f) {
            return mapP(f);
        };
    };

    var op_BarGreaterGreater = __exports.op_BarGreaterGreater = function (x, f) {
        return mapP(f)(x);
    };

    var applyP = __exports.applyP = function (fP, xP) {
        return op_GreaterGreaterEquals(fP, function (f) {
            return op_GreaterGreaterEquals(xP, function (x) {
                return returnP(f(x));
            });
        });
    };

    var op_LessMultiplyGreater = __exports.op_LessMultiplyGreater = function () {
        return function (fP) {
            return function (xP) {
                return applyP(fP, xP);
            };
        };
    };

    var lift2 = __exports.lift2 = function (f, xP, yP) {
        return op_LessMultiplyGreater()(op_LessMultiplyGreater()(returnP(f))(xP))(yP);
    };

    var andThen = __exports.andThen = function (p1, p2) {
        var label = fsFormat("%s andThen %s")(function (x) {
            return x;
        })(getLabel(p1))(getLabel(p2));
        return op_LessQmarkGreater()(op_GreaterGreaterEquals(p1, function (p1Result) {
            return op_GreaterGreaterEquals(p2, function (p2Result) {
                return returnP([p1Result, p2Result]);
            });
        }))(label);
    };

    var op_DotGreaterGreaterDot = __exports.op_DotGreaterGreaterDot = function () {
        return function (p1) {
            return function (p2) {
                return andThen(p1, p2);
            };
        };
    };

    var orElse = __exports.orElse = function (parser1, parser2) {
        var label = fsFormat("%s orElse %s")(function (x) {
            return x;
        })(getLabel(parser1))(getLabel(parser2));

        var innerFn = function innerFn(input) {
            var result1 = run(parser1, input);

            if (result1.Case === "Failure") {
                var err = result1.Fields[0][1];
                var result2 = run(parser2, input);

                if (result2.Case === "Failure") {
                    var err_1 = result2.Fields[0][1];
                    return new Result("Failure", [[label, err_1]]);
                } else {
                    return result2;
                }
            } else {
                return result1;
            }
        };

        return new Parser(innerFn, label);
    };

    var op_LessBarGreater = __exports.op_LessBarGreater = function () {
        return function (parser1) {
            return function (parser2) {
                return orElse(parser1, parser2);
            };
        };
    };

    var choice = __exports.choice = function (listOfParsers) {
        return reduce(function ($var16, $var17) {
            return op_LessBarGreater()($var16)($var17);
        }, listOfParsers);
    };

    var anyOf = __exports.anyOf = function (listOfChars) {
        var label = fsFormat("any of %A")(function (x) {
            return x;
        })(listOfChars);
        return op_LessQmarkGreater()(choice(function (list) {
            return map_1(function (charToMatch) {
                return pchar(charToMatch);
            }, list);
        }(listOfChars)))(label);
    };

    var zeroOrOne = __exports.zeroOrOne = function (parser) {
        var innerFn = function innerFn(input) {
            return input === "" ? new Result("Success", [["", ""]]) : run(parser, input);
        };

        return new Parser(innerFn, "zeroOrOne");
    };

    var parseZeroOrMore = __exports.parseZeroOrMore = function (parser, input) {
        var firstResult = run(parser, input);

        if (firstResult.Case === "Success") {
            var inputAfterFirstParse = firstResult.Fields[0][1];
            var firstValue = firstResult.Fields[0][0];
            var patternInput = parseZeroOrMore(parser, inputAfterFirstParse);
            var values = new List(firstValue, patternInput[0]);
            return [values, patternInput[1]];
        } else {
            return [new List(), input];
        }
    };

    var parseXTimes = __exports.parseXTimes = function (count, parser) {
        var innerFn = function innerFn(input) {
            var innerParse = function innerParse(count_) {
                return function (input_) {
                    return function (acc) {
                        return count_ === 0 ? new Result("Success", [[reverse(acc), input_]]) : function () {
                            var matchValue = run(parser, input_);

                            if (matchValue.Case === "Success") {
                                var v = matchValue.Fields[0][0];
                                var rest = matchValue.Fields[0][1];
                                return innerParse(count_ - 1)(rest)(new List(v, acc));
                            } else {
                                var _label = matchValue.Fields[0][0];
                                var error = matchValue.Fields[0][1];
                                var label_1 = fsFormat("Failed to parse \"%s\" %i number of times ")(function (x) {
                                    return x;
                                })(_label)(count);
                                return new Result("Failure", [[label_1, error]]);
                            }
                        }();
                    };
                };
            };

            return innerParse(count)(input)(new List());
        };

        var label = fsFormat("Failed to parse \"%s\" %i number of times ")(function (x) {
            return x;
        })(getLabel(parser))(count);
        return new Parser(innerFn, label);
    };

    var many = __exports.many = function (parser) {
        var label = fsFormat("many %s")(function (x) {
            return x;
        })(getLabel(parser));

        var innerFn = function innerFn(input) {
            return new Result("Success", [parseZeroOrMore(parser, input)]);
        };

        return new Parser(innerFn, label);
    };

    var many1 = __exports.many1 = function (p) {
        var label = fsFormat("many1 %s")(function (x) {
            return x;
        })(getLabel(p));
        return op_LessQmarkGreater()(op_GreaterGreaterEquals(p, function (head) {
            return op_GreaterGreaterEquals(many(p), function (tail) {
                return returnP(new List(head, tail));
            });
        }))(label);
    };

    var op_DotGreaterGreater = __exports.op_DotGreaterGreater = function (p1, p2) {
        return mapP(function (tupledArg) {
            return tupledArg[0];
        })(op_DotGreaterGreaterDot()(p1)(p2));
    };

    var op_GreaterGreaterDot = __exports.op_GreaterGreaterDot = function (p1, p2) {
        return mapP(function (tupledArg) {
            return tupledArg[1];
        })(op_DotGreaterGreaterDot()(p1)(p2));
    };

    var drop = __exports.drop = function (p) {
        var innerFn = function innerFn(input) {
            var matchValue = run(p, input);

            if (matchValue.Case === "Failure") {
                var label = matchValue.Fields[0][0];
                var error = matchValue.Fields[0][1];
                return new Result("Failure", [[label, error]]);
            } else {
                var rest = matchValue.Fields[0][1];
                return new Result("Success", [[null, rest]]);
            }
        };

        return new Parser(innerFn, "drop");
    };

    var opt = __exports.opt = function (p) {
        var label = fsFormat("opt %s")(function (x) {
            return x;
        })(getLabel(p));
        var some = op_BarGreaterGreater(p, function (arg0) {
            return arg0;
        });
        var none = returnP();
        return op_LessQmarkGreater()(op_LessBarGreater()(some)(none))(label);
    };

    var charListToStr = __exports.charListToStr = function (charList) {
        return Array.from(charList).join('');
    };

    var manyChars = __exports.manyChars = function (cp) {
        return op_BarGreaterGreater(many(cp), function (charList) {
            return charListToStr(charList);
        });
    };

    var manyChars1 = __exports.manyChars1 = function (cp) {
        return op_BarGreaterGreater(many1(cp), function (charList) {
            return charListToStr(charList);
        });
    };

    var pint = __exports.pint = function () {
        var label = "integer";

        var resultToInt = function resultToInt(tupledArg) {
            var i = Number.parseInt(tupledArg[1]);

            if (tupledArg[0] == null) {
                return i;
            } else {
                return -i;
            }
        };

        var digits = manyChars1(digitChar);
        return op_LessQmarkGreater()(mapP(resultToInt)(op_DotGreaterGreaterDot()(opt(pchar("-")))(digits)))(label);
    }();

    var pfloat = __exports.pfloat = function () {
        var label = "float";

        var resultToFloat = function resultToFloat(tupledArg) {
            var sign = tupledArg[0][0][0];
            var digits1 = tupledArg[0][0][1];
            var fl = Number.parseFloat(fsFormat("%s.%s")(function (x) {
                return x;
            })(digits1)(tupledArg[1]));

            if (sign == null) {
                return fl;
            } else {
                return -fl;
            }
        };

        var digits = manyChars1(digitChar);
        return op_LessQmarkGreater()(mapP(resultToFloat)(op_DotGreaterGreaterDot()(op_DotGreaterGreaterDot()(op_DotGreaterGreaterDot()(opt(pchar("-")))(digits))(pchar(".")))(digits)))(label);
    }();

    var sequence = __exports.sequence = function (parserList) {
        var cons = function cons(head) {
            return function (tail) {
                return new List(head, tail);
            };
        };

        var consP = function () {
            var f = cons;
            return function (xP) {
                return function (yP) {
                    return lift2(f, xP, yP);
                };
            };
        }();

        if (parserList.tail != null) {
            return consP(parserList.head)(sequence(parserList.tail));
        } else {
            return returnP(new List());
        }
    };

    var pStaticStr = __exports.pStaticStr = function (str) {
        return op_LessQmarkGreater()(mapP(function (charList) {
            return charListToStr(charList);
        })(sequence(function (list) {
            return map_1(function (charToMatch) {
                return pchar(charToMatch);
            }, list);
        }(toList(str)))))(str);
    };

    var pString = __exports.pString = function () {
        var label = "string";

        var predicate = function predicate(_arg1) {
            return true;
        };

        return mapP(function (charList) {
            return charListToStr(charList);
        })(many(satisfy(predicate, "string")));
    }();

    var pStringTo = __exports.pStringTo = function (endingChar) {
        var label = fsFormat("string up to char %c")(function (x) {
            return x;
        })(endingChar);
        var ending = pchar(endingChar);

        var predicate = function predicate(c) {
            return c !== endingChar;
        };

        var stringParser = mapP(function (charList) {
            return charListToStr(charList);
        })(many(satisfy(predicate, "string")));
        return op_DotGreaterGreater(stringParser, ending);
    };

    var phexdigit = __exports.phexdigit = function () {
        var label = "hexadecimal";
        var hexChars = concat(ofArray([toList(rangeChar("a", "f")), toList(rangeChar("A", "F")), toList(rangeChar("0", "9"))]));
        return op_LessQmarkGreater()(anyOf(hexChars))("Expected valid hex digit");
    }();

    var pguid = __exports.pguid = function () {
        var resultToGuid = function resultToGuid(tupledArg) {
            var guidStr = fsFormat("%s-%s-%s-%s-%s")(function (x) {
                return x;
            })(tupledArg[0][0])(item(0, tupledArg[0][1]))(item(1, tupledArg[0][1]))(item(2, tupledArg[0][1]))(tupledArg[1]);
            return guidStr;
        };

        var parseMiddlePart = mapP(function (charList) {
            return charListToStr(charList);
        })(op_GreaterGreaterDot(pchar("-"), parseXTimes(4, phexdigit)));
        return op_LessQmarkGreater()(mapP(resultToGuid)(op_DotGreaterGreaterDot()(op_DotGreaterGreater(op_DotGreaterGreaterDot()(mapP(function (charList) {
            return charListToStr(charList);
        })(parseXTimes(8, phexdigit)))(parseXTimes(3, parseMiddlePart)), pchar("-")))(mapP(function (charList) {
            return charListToStr(charList);
        })(parseXTimes(12, phexdigit)))))("guid");
    }();

    var op_LessDivideGreater = __exports.op_LessDivideGreater = function (p1, p2) {
        return op_DotGreaterGreaterDot()(op_DotGreaterGreater(p1, pchar("/")))(p2);
    };

    var op_LessDotDivideGreater = __exports.op_LessDotDivideGreater = function (p1, p2) {
        return op_DotGreaterGreater(op_DotGreaterGreater(p1, pchar("/")), p2);
    };

    var op_LessDivideDotGreater = __exports.op_LessDivideDotGreater = function (p1, p2) {
        return op_GreaterGreaterDot(op_GreaterGreaterDot(p1, pchar("/")), p2);
    };

    var _end = __exports._end = function (parser) {
        var label = "End of input";

        var innerFn = function innerFn(input) {
            var matchValue = run(parser, input);

            if (matchValue.Case === "Failure") {
                var label_1 = matchValue.Fields[0][0];
                var err = matchValue.Fields[0][1];
                return new Result("Failure", [[label_1, err]]);
            } else {
                var x = matchValue.Fields[0][0];
                var rest = matchValue.Fields[0][1];

                if (isNullOrEmpty(rest)) {
                    return new Result("Success", [[x, rest]]);
                } else {
                    return new Result("Failure", [[label, fsFormat("Expected rest of input to be empty, got %s")(function (x) {
                        return x;
                    })(rest)]]);
                }
            }
        };

        return new Parser(innerFn, label);
    };

    var choose = __exports.choose = function (routes, input) {
        return tryPick(function (r) {
            var matchValue = r(input);

            if (matchValue.Case === "Failure") {
                return null;
            } else {
                return matchValue.Fields[0];
            }
        }, routes);
    };

    var runM = __exports.runM = function (map, route, str) {
        var matchValue = run(route, str);

        if (matchValue.Case === "Failure") {
            var y = matchValue.Fields[0][1];
            var x = matchValue.Fields[0][0];
            return new Result("Failure", [[x, y]]);
        } else {
            return new Result("Success", [map]);
        }
    };

    var runM1 = __exports.runM1 = function (map, route, str) {
        var matchValue = run(route, str);

        if (matchValue.Case === "Failure") {
            var y = matchValue.Fields[0][1];
            var x = matchValue.Fields[0][0];
            return new Result("Failure", [[x, y]]);
        } else {
            var _x = matchValue.Fields[0][0];
            return new Result("Success", [map(_x)]);
        }
    };

    var runM2 = __exports.runM2 = function () {
        return function (map) {
            return function (route) {
                return function (str) {
                    return runM1(map, route, str);
                };
            };
        };
    };

    var runM3 = __exports.runM3 = function (map, route, str) {
        var matchValue = run(route, str);

        if (matchValue.Case === "Failure") {
            var y = matchValue.Fields[0][1];
            var x = matchValue.Fields[0][0];
            return new Result("Failure", [[x, y]]);
        } else {
            var z = matchValue.Fields[0][0][1];
            var _y = matchValue.Fields[0][0][0][1];
            var _x2 = matchValue.Fields[0][0][0][0];
            return new Result("Success", [map([_x2, _y, z])]);
        }
    };

    var runM4 = __exports.runM4 = function (map, route, str) {
        var matchValue = run(route, str);

        if (matchValue.Case === "Failure") {
            var y = matchValue.Fields[0][1];
            var x = matchValue.Fields[0][0];
            return new Result("Failure", [[x, y]]);
        } else {
            var z = matchValue.Fields[0][0][0][1];
            var _y2 = matchValue.Fields[0][0][0][0][1];
            var _x3 = matchValue.Fields[0][0][0][0][0];
            var v = matchValue.Fields[0][0][1];
            return new Result("Success", [map([_x3, _y2, z, v])]);
        }
    };

    var runM5 = __exports.runM5 = function (map, route, str) {
        var matchValue = run(route, str);

        if (matchValue.Case === "Failure") {
            var y = matchValue.Fields[0][1];
            var x = matchValue.Fields[0][0];
            return new Result("Failure", [[x, y]]);
        } else {
            var z = matchValue.Fields[0][0][0][0][1];
            var _y3 = matchValue.Fields[0][0][0][0][0][1];
            var _x4 = matchValue.Fields[0][0][0][0][0][0];
            var w = matchValue.Fields[0][0][1];
            var v = matchValue.Fields[0][0][0][1];
            return new Result("Success", [map([_x4, _y3, z, v, w])]);
        }
    };

    var runM6 = __exports.runM6 = function (map, route, str) {
        var matchValue = run(route, str);

        if (matchValue.Case === "Failure") {
            var y = matchValue.Fields[0][1];
            var x = matchValue.Fields[0][0];
            return new Result("Failure", [[x, y]]);
        } else {
            var z = matchValue.Fields[0][0][0][0][0][1];
            var _y4 = matchValue.Fields[0][0][0][0][0][0][1];
            var _x5 = matchValue.Fields[0][0][0][0][0][0][0];
            var w = matchValue.Fields[0][0][0][1];
            var v = matchValue.Fields[0][0][0][0][1];
            var u = matchValue.Fields[0][0][1];
            return new Result("Success", [map([_x5, _y4, z, v, w, u])]);
        }
    };

    return __exports;
}({});
export var RouteParser = function (__exports) {
    var LocationHandler = __exports.LocationHandler = function () {
        function LocationHandler(subscribeToChange, pushChange) {
            _classCallCheck(this, LocationHandler);

            this.SubscribeToChange = subscribeToChange;
            this.PushChange = pushChange;
        }

        _createClass(LocationHandler, [{
            key: _Symbol.reflection,
            value: function () {
                return {
                    type: "Fable.Arch.RouteParser.RouteParser.LocationHandler",
                    interfaces: ["FSharpRecord"],
                    properties: {
                        SubscribeToChange: "function",
                        PushChange: "function"
                    }
                };
            }
        }]);

        return LocationHandler;
    }();

    setType("Fable.Arch.RouteParser.RouteParser.LocationHandler", LocationHandler);

    var Router = __exports.Router = function () {
        function Router(parse, route) {
            _classCallCheck(this, Router);

            this.Parse = parse;
            this.Route = route;
        }

        _createClass(Router, [{
            key: _Symbol.reflection,
            value: function () {
                return {
                    type: "Fable.Arch.RouteParser.RouteParser.Router",
                    interfaces: ["FSharpRecord"],
                    properties: {
                        Parse: "function",
                        Route: "function"
                    }
                };
            }
        }]);

        return Router;
    }();

    setType("Fable.Arch.RouteParser.RouteParser.Router", Router);

    var createRouter = __exports.createRouter = function (routes, mapRoute) {
        return new Router(function (input) {
            return Parsing.choose(routes, input);
        }, mapRoute);
    };

    var routeProducer = __exports.routeProducer = function (locationHandler, router, handler) {
        var changeHandler = function changeHandler(str) {
            var matchValue = router.Parse(str);

            if (matchValue == null) {} else {
                handler(matchValue);
            }
        };

        locationHandler.SubscribeToChange(changeHandler);
    };

    var routeSubscriber = __exports.routeSubscriber = function (locationHandler, router, message) {
        (function (_arg1) {
            if (_arg1 == null) {} else {
                locationHandler.PushChange(_arg1);
            }
        })(router(message));
    };

    return __exports;
}({});
//# sourceMappingURL=Fable.Arch.RouteParser.js.map