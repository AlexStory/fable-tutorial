{"version":3,"sources":["../../fable-arch/src/Fable.Arch/Fable.Arch.Navigation.fs"],"names":[],"mappings":";;;;;;;;;;AAMK;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAcW;AAAW;AACf;AADY;AAdnB;;AAAA;AAAA;;AA2BA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAMD,OAA4B;AAAA,sCAEb,kBAFa;AAEF;AAE1B,OAEG;AAAA,mCACC;AAAA;AAAA,KADD;AAKG;AAEN,OACA;AAAA;AAA+C;AAE/C,OACA;AAAA;AAAkD;AAElD,OACA;AAAA,QAAG,OAAH,EAEI;AAAA;AAA4B;AAAA;AAEhC,OACI;AAAgB;AAAA;AAAA,8CAKZ;AAAA,sCACsC,MAAU;AAAU;AAAA;AAAA;;AAAV;AAAA;AAAA;AAAiB,yBAAjB;AAAA;AAAiB,iBAAjB,EAAV,eADtC;AAAA,iDALY,GAEZ;AAAA,sCACsC,MAAU;AAAU;AAAA;AAAA;;AAAV;AAAA;AAAA;AAAiB,yBAAjB;AAAA;AAAiB,iBAAjB,EAAV,eADtC;AAAA,+BAAiB,uBAAjB,EAFY;AAAA;AAAA;;AASZ;AAAgB;AACD;AACf,cAAG,iCAAoB,0CAApB,EAAH;AAFgB;AAAC,SAAD;;AAAhB,4CAKqD;AAAA;AAAA,SALrD;AAAiB,KAAjB;;AAQA;AAAmC,oCAAU;AAAa;AAAc;AAAA;AAAA;;AAAd;AAAA;AAAA;AAAqB,aAArB;;AAAb;AAAA;AAAA;AAAmC,SAAnC,EAAV;AACvC;AADmB,KAAf;;AAIe,4BAAU;AAAc;AAAA;AAAA;;AAAoB;AAAA;AAAA;AAAA;AAAA;;AAAlC;AAAA;AAAA;AAAyD,aAAzD;AAAA;AAAyD,KAAzD,EAAV;;AAEL;AAAU;AAAA;AAAA;;AAAV;AAAA;AAAiC,SAAjC;AAAiC,KAAjC;;AAGV;AACI;AACA;AAAA;AAAA;AAAA,uCAAU;AAAA;AAAA,yBAAV;AAAA;AAAA;AAAA;;AADA;AAAsB,SAAtB;;AAKJ;AAAA;AAAA;AAAA;AAAA,uCAAoB;AAAA;AAAA,yBAApB;AAAA;AAAA;AAAA;AAAA;;AANA;AAAoB,KAApB;;AAUa;AACrB;AArCiB","file":"Fable.Arch.Navigation.js","sourcesContent":["module Fable.Arch.Navigation\nopen Fable\nopen Fable.Arch.App\nopen Fable.Arch.App.AppApi\nopen Fable.Arch.Html\n\ntype Location = \n    {\n        Href: string\n        Host: string\n        Hostname: string\n        Protocol: string\n        Origin: string\n        Port: string\n        Pathname: string\n        Search: string\n        Hash: string\n    }\n    with \n        static member getLocation() = \n            let location = Import.Browser.document.location\n            {\n                Href = location.href\n                Host = location.host\n                Hostname = location.hostname\n                Protocol = location.protocol\n                Origin = location.origin\n                Port = location.port\n                Pathname = location.pathname\n                Search = location.search\n                Hash = location.hash\n            }\n\ntype NavigationAction<'TAction> =\n    | Change of Location\n    | Message of 'TAction\n\ntype Parser<'TAction> = Location -> 'TAction\n\nlet mapDownNavigationAction f = function\n    | Change _ -> None\n    | Message m -> f m |> Some\n\nlet mapDownModelChanged mc =\n    mc.Message \n    |> mapDownNavigationAction (fun m -> \n        {\n            Message = m\n            PreviousState = mc.PreviousState\n            CurrentState = mc.CurrentState\n        })\n\nlet pushState url = \n    Import.Browser.history.pushState(null, \"\", url)\n\nlet setState url = \n    Import.Browser.history.replaceState(null, \"\", url)\n\nlet go n = \n    if n <> 0\n    then \n        Import.Browser.history.go(n)\n\nlet withNavigation parser urlUpdate app =\n    let update' model = function \n        | Change location -> \n            urlUpdate model (parser location) \n            |> (fun (m, actions) -> m, actions |> List.map (mapAction Message))\n        | Message msg ->\n            app.Update model msg\n            |> (fun (m, actions) -> m, actions |> List.map (mapAction Message))\n\n    let popStateProducer h =\n        let popstateHandler _ =\n            let location = Location.getLocation()\n            h (AppMessage.Message (Change (location)))\n            null\n        // Must be a lambda to compile\n        Import.Browser.window.addEventListener_popstate(fun x -> popstateHandler x)\n\n    let producers = \n        let mappedProducers = app.Producers |> List.map (mapProducer (mapAppMessage Message))\n        popStateProducer::mappedProducers\n\n    let subscribers = \n        app.Subscribers |> List.map (mapSubscriber mapDownModelChanged mapDownNavigationAction)\n\n    let initMessage = mapAction Message app.InitMessage\n\n    let mapCreateRenderer createRenderer =\n        let mapRenderer renderer = \n            let renderer' handler view =\n                renderer (Message >> handler) view\n            renderer'\n\n        let createRenderer' sel handler view = \n            createRenderer sel (Message >> handler) view\n            |> mapRenderer\n        createRenderer'\n\n    let createRenderer = mapCreateRenderer app.CreateRenderer\n    {\n        InitState = app.InitState\n        View = app.View\n        Update = update'\n        InitMessage = initMessage \n        CreateRenderer = createRenderer\n        NodeSelector = app.NodeSelector\n        Producers = producers\n        Subscribers = subscribers\n    }"]}