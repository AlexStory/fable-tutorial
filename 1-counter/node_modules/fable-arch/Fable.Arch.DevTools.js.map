{"version":3,"sources":["../../fable-arch/src/Fable.Arch/Fable.Arch.DevTools.fs"],"names":[],"mappings":"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","file":"Fable.Arch.DevTools.js","sourcesContent":["module Fable.Arch.DevTools\n\nopen Fable.Arch.App\nopen Fable.Arch.Html\n\nopen Fable.Core\nopen Fable.Import\nopen System\n//open Fable.Import.Browser\ntype ActionItem<'TAppMessage, 'TAppModel> = {\n    Id: Guid\n    Excluded: bool\n    Message: 'TAppMessage\n    State: 'TAppModel\n}\ntype DevToolsModel<'TAppMessage, 'TAppModel> = \n    {\n        Base: 'TAppModel\n        LastCommited: 'TAppModel option\n        Actions: ActionItem<'TAppMessage, 'TAppModel> list\n        Collapsed: Map<string,bool>\n        PushToApp: 'TAppModel * ((Guid*'TAppMessage) list) -> unit\n    }\n\ntype DevToolsMessage<'TAppMessage, 'TAppModel> = \n    | AddMessage of 'TAppMessage * 'TAppModel\n    | MessagesReplayed of (Guid*'TAppModel) list\n    | ToggleObjectVisibility of string\n    | ToggleAction of Guid\n    | Commit\n    | Sweep\n    | Revert\n    | Reset\n\nlet isCollapsed str model = \n    model.Collapsed \n    |> Map.tryFind str \n    |> Option.fold (fun x y -> x || y) false\n\nlet devToolsUpdate model action = \n    let model', messages = \n        match action with\n        | Commit ->\n            let latestCommited = (model.Actions |> List.last).State\n            {model with LastCommited = Some latestCommited; Actions = []}, [fun h -> model.PushToApp (latestCommited,[])]\n        | AddMessage (msg, appModel) ->\n            {model with Actions = model.Actions @ [{Id = Guid.NewGuid(); Excluded = false; Message = msg; State = appModel}]},[]\n        | MessagesReplayed modelList ->\n            let actions = \n                modelList\n                |> List.fold (fun s (id, m) -> s |> List.map (fun a -> if a.Id = id then {a with State = m} else a)) model.Actions\n            {model with Actions = actions}, []\n        | ToggleObjectVisibility str ->\n            let currentValue = isCollapsed str model\n            {model with Collapsed = model.Collapsed |> Map.add str (currentValue |> not)},[]\n        | ToggleAction id ->\n            let actions =\n                model.Actions \n                |> List.map (fun i -> if i.Id = id then {i with Excluded = not i.Excluded} else i)\n            let m' = {model with Actions = actions }\n            \n            let actionsToReplay = \n                m'.Actions\n                |> List.filter (fun i -> i.Excluded |> not)\n                |> List.map (fun i -> i.Id, i.Message)\n\n            let currentBase = defaultArg m'.LastCommited m'.Base\n            let messages = \n                [\n                    (fun h -> model.PushToApp (currentBase, actionsToReplay))\n                ]\n            m', messages\n        | Sweep ->\n            let actions = model.Actions |> List.filter (fun i -> i.Excluded |> not)\n            {model with Actions = actions}, []\n        | Revert -> \n            match model.LastCommited with\n            | Some m ->\n                {model with Actions = []},[fun h -> model.PushToApp (m,[])]\n            | None ->\n                model,[]\n        | Reset -> \n            {model with Actions = []; LastCommited = None}, [fun h -> model.PushToApp (model.Base, [])]\n\n    model', messages\n\nlet cssString = \"\"\"\n    ._fable_dev_tools {\n        background-color: #2d2a2a;\n        position: fixed;\n        top: 0;\n        right: 0;\n        min-width: 400px;\n        height: 100%;\n        font-family: 'Open Sans', sans-serif;\n        color: #e0e0e0;\n        z-index: 1000;\n    }\n    ._fable_dev_tools ul {\n        padding: 0;\n        margin: 0;\n        list-style: none;\n    }\n    ._fable_dev_tools .actions {\n        margin-bottom: 5px;\n    }\n    ._fable_dev_tools .actions li {\n        color: #565656;\n        display: inline-block;\n        width: 90px;\n        text-align:center;\n        padding-top: 5px;\n        padding-bottom: 5px;\n        margin-left: 5px;\n        margin-right: 5px;\n        font-weight: bold;\n    }\n    ._fable_dev_tools .actions li.active {\n        background-color: #565656;\n        color: #e0e0e0;\n        cursor: pointer;\n    }\n\n    ._fable_dev_tools .action-list {\n        margin: 0px;\n        padding: 0px;\n        margin-left: 0px;\n        overflow-y: auto;\n        height: 100%;\n    }\n\n    ._fable_dev_tools .action-list .row {\n        margin: 0px;\n    }\n    ._fable_dev_tools .action-list .row.excluded .content {\n        display: none;\n    }\n\n    ._fable_dev_tools .action-list .row.excluded .header {\n        background-color: #343434;\n        color: #565656;\n        text-decoration: line-through;\n    }\n\n    ._fable_dev_tools .action-list .header {\n        padding: 15px;\n        background-color: #565656;\n        width: 100%;\n    }\n\n    ._fable_dev_tools .action-list .header.action {\n        cursor: pointer;\n    }\n\n    ._fable_dev_tools .action-list .content {\n        padding-top: 10px;\n        padding-bottom: 10px;\n    }\n\n    ._fable_dev_tools .action-list .item {\n        padding-left: 15px;    \n    }\n\n    ._fable_dev_tools .action-list .row:last-child {\n        margin-bottom: 40px;\n    }\n\n    ._fable_dev_tools .action-list .item .item-header.expand-collapse {\n        cursor: pointer;\n        margin-left: 15px;\n    }\n\n    ._fable_dev_tools .action-list .item .item-header.expand-collapse::before {\n        content: \"\\25BA\";\n        position: relative;\n        font-size: 10px;\n        margin-left: -15px;\n        margin-top: 3px;\n        transform: rotate(90deg);\n        transition-property: transform;\n        transition-duration: 0.3s;\n        display: inline-block;\n        padding-right: 5px;\n    }\n\n    ._fable_dev_tools .action-list .item.collapsed .item-header.expand-collapse::before {\n        transform: rotate(0deg);\n        transition-property: transform;\n        transition-duration: 0.3s;\n    }\n\n    ._fable_dev_tools .action-list .item.collapsed .item-value {\n        display: none;\n    }\n\n    ._fable_dev_tools .item .item-short-value.string {\n        color: #345678;\n    }\n\n    ._fable_dev_tools .item .item-short-value.number {\n        color: #876543;\n    }\n\n    ._fable_dev_tools .item .item-short-value.array {\n        color: #9356ab;\n    }\n\n    ._fable_dev_tools .item .item-short-value.object {\n        color: #ab9356;\n    }\n\n    ._fable_dev_tools .item .item-short-value.bool {\n        color: #93ab56;\n    }\n\"\"\"\n\nopen JsInterop\n\n\nlet [<Emit(\"$0 instanceof Object\")>] isObj (x:obj): bool = failwith \"JS only\" \nlet [<Emit(\"$0 instanceof Array\")>] isArray (x:obj): bool = failwith \"JS only\" \nlet [<Emit(\"$0 != undefined && $0.constructor === Number\")>] isNumber (x:obj): bool = failwith \"JS only\" \nlet [<Emit(\"$0 != undefined && $0.constructor === String\")>] isString (x:obj): bool = failwith \"JS only\" \nlet [<Emit(\"$0 != undefined && $0.constructor === Boolean\")>] isBool (x:obj): bool = failwith \"JS only\" \n\nlet [<Emit(\"(function() {var x = []; $0.mapIndexed(function(idx,item) {x[idx] = item;}); return x;})()\")>] listToArray (list:obj): JS.Array<_> = failwith \"JS only\"\nlet [<Emit(\"$0 instanceof $1\")>] instanceof (x: obj) (t: obj): bool = failwith \"JS only\"\n\nlet devToolsView model =\n    let pluralize str count = \n        if count <> 1 then sprintf \"%s%s\" str \"s\"\n        else str\n\n    let getMessageTitle o =\n        let x = JsInterop.toPlainJsObj o\n        sprintf \"%s\" (x?Case |> string)\n\n    let rec renderThing thingName parentId (o:obj) =\n        let thisId = sprintf \"%s_%s\" parentId thingName\n        let collapsed = isCollapsed thisId model\n        let extraClass = if collapsed then \" collapsed\" else \"\"\n\n        let renderChildren propertyNames o = \n            propertyNames |> Seq.map (fun y -> renderThing y thisId (o?(y))) |> Seq.toList\n\n        let renderValue thingName typeName value = \n                div [attribute \"class\" \"item-value\"] [\n                    span [attribute \"class\" \"item-name\"] [text (sprintf \"%s: \" thingName)]\n                    span [attribute \"class\" (sprintf \"item-short-value %s\" typeName)] [text value]\n                ]\n            \n        let header thingName collapseable onClicked typeName value =\n            let headerClass = if collapseable then \"item-header expand-collapse\" else \"item-header\" \n            let headerAttributes = \n                (attribute \"class\" headerClass) ::\n                match onClicked with\n                | None -> []\n                | Some h -> [onMouseClick h]\n            div headerAttributes\n                [\n                    span [attribute \"class\" \"item-key\"] [text (sprintf \"%s: \" thingName)]\n                    span [attribute \"class\" (sprintf \"item-short-value %s\" typeName)] [text value]\n                ]                \n\n        let renderComplexType t keys typeName o = \n            let length = keys |> List.length\n            let itemWord = if t = \"object\" then \"key\" else \"item\"\n            let headerText = (sprintf \"%s (%i %s) \" typeName length (pluralize itemWord length))\n            [\n                header thingName true (Some (fun _ -> ToggleObjectVisibility thisId)) t headerText\n                div [attribute \"class\" \"item-value\"]\n                    (renderChildren keys o)\n            ]\n\n        let renderItem children = \n            div [attribute \"class\" (sprintf \"item%s\" extraClass); attribute \"id\" thisId]\n                children\n\n        let valueOnly typeName value = header thingName false None typeName (value.ToString())\n        match o with\n        | null -> [valueOnly \"\" o]\n        | x when x.GetType().Name = \"FSharpList\" ->\n            let list = listToArray o \n            renderComplexType \"array\" ([0 .. ((-) (list?length |> string |> int)) 1] |> List.map string) \"FSharpList\" list\n        | x when instanceof x JS.Array ->\n            renderComplexType \"array\" ([0 .. ((-) (o?length |> string |> int)) 1] |> List.map string) (x.GetType().Name) x\n        | x when instanceof x JS.Object-> \n            renderComplexType \"object\" (Fable.Import.JS.Object.getOwnPropertyNames(o) |> Seq.toList) (x.GetType().Name) x\n        | x when isNumber x -> \n            [ valueOnly \"number\" x ]\n        | x when isString x -> \n            [ valueOnly \"string\" x ]\n        | x when isBool x -> \n            [ valueOnly \"bool\" x ]\n        | _ -> [ valueOnly \"???\" o]\n        |> renderItem\n\n    let toolStyles = \n        style []\n            [\n                text cssString\n                link [ attribute \"href\" \"https://fonts.googleapis.com/css?family=Open+Sans:400,400i,700,700i\"; attribute \"rel\" \"stylesheet\"]\n            ]\n\n    let toolHeader model =\n        let actions = model.Actions \n        let headerAction headerText func = \n            match func with\n            | None -> li [] [text headerText]\n            | Some f -> li [attribute \"class\" \"active\"; onMouseClick (fun _ -> f)] [text headerText]\n\n        let excluded = actions |> List.exists (fun i -> i.Excluded)\n        let anyNotExcluded = actions |> List.exists (fun i -> not i.Excluded)\n        let isCommited = model.LastCommited |> Option.isSome\n        let anyActions = actions |> List.isEmpty |> not\n\n        header [attribute \"class\" \"actions\"]\n            [\n                ul []\n                    [\n                        headerAction \"Reset\" (if anyActions || isCommited then Some Reset else None)\n                        headerAction \"Revert\" (if isCommited && anyActions then Some Revert else None)\n                        headerAction \"Sweep\" (if excluded then Some Sweep else None)\n                        headerAction \"Commit\" (if anyNotExcluded then Some Commit else None)\n                    ]\n            ]\n\n    let row headerText headerClicked excluded content =\n        let rowClass = if excluded then \"row excluded\" else \"row\"\n\n        let headerAttributes = \n            match headerClicked with\n            | Some h -> [onMouseClick h; attribute \"class\" \"header action\"]\n            | None -> [attribute \"class\" \"header\"]\n            \n        let inner = \n            (div headerAttributes [text headerText]) ::\n                    match excluded with\n                    | true -> []\n                    | false -> [ div [attribute \"class\" \"content\"] [content] ]\n\n        div [attribute \"class\" rowClass]\n            inner\n\n    let renderAction a = \n        let toggleAction = Some (fun _ -> ToggleAction a.Id)\n        let content = \n            div []\n                [\n                    a.Message |> renderThing \"action\" (sprintf \"_action_%s\" (a.Id.ToString()))\n                    a.State |> renderThing \"state\" (sprintf \"_state_%s\" (a.Id.ToString()))\n                ]\n        row (a.Message |> getMessageTitle) toggleAction a.Excluded content\n\n    let toolContent model = \n        let currentBase = defaultArg model.LastCommited model.Base\n        let baseState = row \"BASE\" None false (currentBase |> renderThing \"model\" \"_base\")\n        let actions = \n            model.Actions |> List.map renderAction\n        div [attribute \"class\" \"action-list\"]\n            (baseState::actions)\n\n    div [attribute \"class\" \"_fable_dev_tools\"]\n        [\n            toolStyles\n            toolHeader model\n            toolContent model\n        ]\n\ntype LinkMessage<'TMessage, 'TModel> = \n    | SetHandler of (AppMessage<'TMessage, 'TModel> -> unit)\n    | Push of AppMessage<'TMessage, 'TModel>\n\ntype LinkState<'TMessage, 'TModel> = \n    {\n        Handler: AppMessage<'TMessage, 'TModel> -> unit\n    }\n\nlet createDevTools<'TMessage, 'TModel> pluginId initModel=\n    let containerNode = Browser.window.document.createElement(\"div\")\n    containerNode.id <- \"___devtools\"\n    Browser.window.document.body.appendChild containerNode |> ignore\n    \n    let linkAgent = MailboxProcessor.Start(fun inbox ->\n        let rec loop (state:LinkState<'TMessage, 'TModel>) = \n            async {\n                let! msg = inbox.Receive()\n                match msg with\n                | Push m -> \n                    state.Handler m\n                    return! loop state\n                | SetHandler h -> \n                    return! loop {state with Handler = h}\n            }\n        loop ({Handler = (fun _ -> ())}:LinkState<'TMessage, 'TModel>)\n    )\n\n    let devToolsAgent = \n        let initModel = \n            {\n                Base = initModel\n                Actions = []\n                Collapsed = Map.empty\n                LastCommited = None\n                PushToApp = (fun m -> linkAgent.Post (Push (AppMessage.Replay m)))\n            }\n        createApp initModel devToolsView devToolsUpdate Virtualdom.createRender\n        |> withStartNodeSelector \"#___devtools\"\n        |> start \n    \n    {\n        Producer = (fun h -> linkAgent.Post(SetHandler h)) \n        Subscriber = (function \n                        | ModelChanged m -> devToolsAgent (Message (AddMessage (m.Message, m.CurrentState)))\n                        | Replayed modelList -> devToolsAgent (Message (MessagesReplayed modelList))\n                        | _ -> ())\n    }\n"]}