{"version":3,"sources":["../../fable-arch/src/Fable.Arch/Fable.Arch.Virtualdom.fs"],"names":[],"mappings":";;;;;;;;;;AAsBI,OACI;AACI;AACA,2BAKI;AAAA,8DAAqD,gBAArD;AAAA,SALJ,CAIG;AAAA;AAAA,WAHA,IAAU;AAAA,gDACY;AAAA;AAAA;AAAA;AAAiB,aAAjB,EADZ;AAAA,SAAV,QAGA,CAJH;;AASG,wBAAU;AAAA,sDAEoB,0BAFpB,gCAGW;AAAA;AAAA;AAAA;AAAO,aAAP,EAHX,mCAIe;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B,aAA9B,EAJf,GACQ;AAAA;AAA2B,aAA3B,EADR;AAAA,SAAV,EADA,OAAa;AAAA;AAAA,SAAb,QACA;AAUJ,yBAHG,uBAEM,6BAFN,QAGH;AApBa,KAAZ;;AAqBG,sBAAO,mBAAP,EAA2B,oBAA3B;AAtBP;AAAkC;AAyBrC;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAKA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAQG,OACE;AAEuB;AAAA,+CAAuC,IAAU;AAAA;AAAA,SAAV,QAAvC;AAAA;;AAFvB;AAAA;AAAI,KAAJ;AAAA,yCAGwB;AAAA;AAAA;AAAA,mDAA6B,UAA7B;AAA+B,SAHvD;AAAA,sCAIQ;AAAA;AAAe,aAJvB;AAAA,gDAKc;AAAA;AAAe,iBAL7B;AAAA;AAAI;AAAA;AAAA;AAAA;AAAA;AAOV,OACI;AAAO;AACX;AADQ;AAGR,OACI;AAAO;AACA;AACI;AACf;AAEI,wDAIkB,gCAJlB;;AAQA;AAAA,4CAA4D;AAAA;AAAI,SAAhE;AAAA;;AAGI;AAAA;AAAa;AACjB;;AAGU;AAAA;;AAAA,wDASF;AAAa;AAA8B;AAA3C,oCAAa,uFAAb;AAAqD;AAAA,iBATnD;AAAA,yDAUS;AAAA,8BAAO,6BAAP;AAA8B,qBAVvC,MAEF;AAAA;AACa;AAA8B;;AAA3C,wCAAa,uFAAb;AAAwD;AAE1C;AACd;AACA,oCAAa,4FAAb;AAA8D;AAPvC;AAAA,aAArB;;AAYJ;AAAA;;AAAA,qDAEF;AAAA;AAAY;AAFW;AAId;AAA8B;AAA3C,4BAAa,uFAAb;AAA0D;AApB5C,SAAV;AAAA;;AAhBJ;AAAI","file":"Fable.Arch.Virtualdom.js","sourcesContent":["[<RequireQualifiedAccess>]\nmodule Fable.Arch.Virtualdom\n\nopen Fable.Core\nopen Fable.Import.Browser\nopen Fable.Core.JsInterop\n\nopen Html\nopen App\n\n[<Import(\"h\",\"virtual-dom\")>]\nlet h(arg1: string, arg2: obj, arg3: obj[]): obj = failwith \"JS only\"\n\n[<Import(\"diff\",\"virtual-dom\")>]\nlet diff (tree1:obj) (tree2:obj): obj = failwith \"JS only\"\n\n[<Import(\"patch\",\"virtual-dom\")>]\nlet patch (node:obj) (patches:obj): Fable.Import.Browser.Node = failwith \"JS only\"\n\n[<Import(\"create\",\"virtual-dom\")>]\nlet createElement (e:obj): Fable.Import.Browser.Node = failwith \"JS only\"\n\nlet createTree<'T> (handler:'T -> unit) tag (attributes:Attribute<'T> list) children =\n    let toAttrs (attrs:Attribute<'T> list) =\n        let elAttributes = \n            attrs\n            |> List.map (function\n                | Attribute (k,v) -> (k ==> v) |> Some\n                | _ -> None)\n            |> List.choose id\n            |> (function | [] -> None | v -> Some (\"attributes\" ==> (createObj(v))))\n        let props =\n            attrs\n            |> List.filter (function | Attribute _ -> false | _ -> true)\n            |> List.map (function\n                | Attribute _ -> failwith \"Shouldn't happen\"\n                | Style style -> \"style\" ==> createObj(unbox style)\n                | Property (k,v) -> k ==> v\n                | EventHandler(ev,f) -> ev ==> ((f >> handler) :> obj)\n            )\n\n        match elAttributes with\n        | None -> props\n        | Some x -> x::props\n        |> createObj\n    let elem = h(tag, toAttrs attributes, List.toArray children)\n    elem\n\ntype RenderState = \n    | NoRequest\n    | PendingRequest\n    | ExtraRequest\n\ntype ViewState<'TMessage> = \n    {\n        CurrentTree: obj\n        NextTree: obj\n        Node: Node \n        RenderState: RenderState\n    }\n\nlet rec renderSomething handler node = \n    match node with\n    | Element((tag,attrs), nodes)\n    | Svg((tag,attrs), nodes) -> createTree handler tag attrs (nodes |> List.map (renderSomething handler))\n    | VoidElement (tag, attrs) -> createTree handler tag attrs []\n    | Text str -> box(string str)\n    | WhiteSpace str -> box(string str)\n\nlet render handler view viewState =\n    let tree = renderSomething handler view\n    {viewState with NextTree = tree}\n\nlet createRender selector handler view =\n    let node = document.body.querySelector(selector) :?> HTMLElement\n    let tree = renderSomething handler view\n    let vdomNode = createElement tree\n    node.appendChild(vdomNode) |> ignore\n    let mutable viewState = \n        {\n            CurrentTree = tree\n            NextTree = tree\n            Node = vdomNode\n            RenderState = NoRequest\n        }\n\n    let raf cb = \n        Fable.Import.Browser.window.requestAnimationFrame(fun fb -> cb())\n\n    let render' handler view = \n        let viewState' = render handler view viewState\n        viewState <- viewState'\n\n        let rec callBack() = \n            match viewState.RenderState with\n            | PendingRequest ->\n                raf callBack |> ignore\n                viewState <- {viewState with RenderState = ExtraRequest}\n\n                let patches = diff viewState.CurrentTree viewState.NextTree\n                patch viewState.Node patches |> ignore\n                viewState <- {viewState with CurrentTree = viewState.NextTree}\n            | ExtraRequest -> \n                viewState <- {viewState with RenderState = NoRequest}\n            | NoRequest -> raise (exn \"Shouldn't happen\")\n        \n        match viewState.RenderState with\n        | NoRequest ->\n            raf callBack |> ignore\n        | _ -> ()\n        viewState <- {viewState with RenderState = PendingRequest}\n\n    render'\n"]}