var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { setType } from "fable-core/Symbol";
import _Symbol from "fable-core/Symbol";
import { compareUnions, equalsUnions, GenericParam, compareRecords, equalsRecords } from "fable-core/Util";
import { AppApi, Types } from "./Fable.Arch.App";
import { map as map_1 } from "fable-core/List";
import List from "fable-core/List";
export var Location = function () {
    function Location(href, host, hostname, protocol, origin, port, pathname, search, hash) {
        _classCallCheck(this, Location);

        this.Href = href;
        this.Host = host;
        this.Hostname = hostname;
        this.Protocol = protocol;
        this.Origin = origin;
        this.Port = port;
        this.Pathname = pathname;
        this.Search = search;
        this.Hash = hash;
    }

    _createClass(Location, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "Fable.Arch.Navigation.Location",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    Href: "string",
                    Host: "string",
                    Hostname: "string",
                    Protocol: "string",
                    Origin: "string",
                    Port: "string",
                    Pathname: "string",
                    Search: "string",
                    Hash: "string"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }], [{
        key: "getLocation",
        value: function () {
            var location = document.location;
            return new Location(location.href, location.host, location.hostname, location.protocol, location.origin, location.port, location.pathname, location.search, location.hash);
        }
    }]);

    return Location;
}();
setType("Fable.Arch.Navigation.Location", Location);
export var NavigationAction = function () {
    function NavigationAction(caseName, fields) {
        _classCallCheck(this, NavigationAction);

        this.Case = caseName;
        this.Fields = fields;
    }

    _createClass(NavigationAction, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "Fable.Arch.Navigation.NavigationAction",
                interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
                cases: {
                    Change: [Location],
                    Message: [GenericParam("TAction")]
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsUnions(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareUnions(this, other);
        }
    }]);

    return NavigationAction;
}();
setType("Fable.Arch.Navigation.NavigationAction", NavigationAction);
export function mapDownNavigationAction(f, _arg1) {
    return _arg1.Case === "Message" ? f(_arg1.Fields[0]) : null;
}
export function mapDownModelChanged(mc) {
    return mapDownNavigationAction(function (m) {
        return new Types.ModelChanged(mc.PreviousState, m, mc.CurrentState);
    }, mc.Message);
}
export function pushState(url) {
    history.pushState(null, "", url);
}
export function setState(url) {
    history.replaceState(null, "", url);
}
export function go(n) {
    if (n !== 0) {
        history.go(n);
    }
}
export function withNavigation(parser, urlUpdate, app) {
    var update_ = function update_(model) {
        return function (_arg1) {
            return _arg1.Case === "Message" ? function (tupledArg) {
                return [tupledArg[0], map_1(function () {
                    var mapping = function mapping(arg0) {
                        return new NavigationAction("Message", [arg0]);
                    };

                    return function (action) {
                        return function (x) {
                            AppApi.mapAction(mapping, action, x);
                        };
                    };
                }(), tupledArg[1])];
            }(app.Update(model)(_arg1.Fields[0])) : function (tupledArg) {
                return [tupledArg[0], map_1(function () {
                    var mapping = function mapping(arg0) {
                        return new NavigationAction("Message", [arg0]);
                    };

                    return function (action) {
                        return function (x) {
                            AppApi.mapAction(mapping, action, x);
                        };
                    };
                }(), tupledArg[1])];
            }(urlUpdate(model)(parser(_arg1.Fields[0])));
        };
    };

    var popStateProducer = function popStateProducer(h) {
        var popstateHandler = function popstateHandler(_arg2) {
            var location = Location.getLocation();
            h(new Types.AppMessage("Message", [new NavigationAction("Change", [location])]));
            return null;
        };

        window.addEventListener('popstate', function (x) {
            return popstateHandler(x);
        });
    };

    var producers = function () {
        var mappedProducers = map_1(function () {
            var map = function () {
                var map = function map(arg0) {
                    return new NavigationAction("Message", [arg0]);
                };

                return function (_arg1) {
                    return AppApi.mapAppMessage(map, _arg1);
                };
            }();

            return function (p) {
                return AppApi.mapProducer(map, p);
            };
        }(), app.Producers);
        return new List(popStateProducer, mappedProducers);
    }();

    var subscribers = map_1(function () {
        var mapModelChanged = function mapModelChanged(mc) {
            return mapDownModelChanged(mc);
        };

        var mapAction = function mapAction(f) {
            return function (_arg1) {
                return mapDownNavigationAction(f, _arg1);
            };
        };

        return function (sub) {
            return function (_arg1) {
                AppApi.mapSubscriber(mapModelChanged, mapAction, sub, _arg1);
            };
        };
    }(), app.Subscribers);

    var initMessage = function () {
        var mapping = function mapping(arg0) {
            return new NavigationAction("Message", [arg0]);
        };

        return function (x) {
            AppApi.mapAction(mapping, app.InitMessage, x);
        };
    }();

    var mapCreateRenderer = function mapCreateRenderer(createRenderer) {
        var mapRenderer = function mapRenderer(renderer) {
            var renderer_ = function renderer_(handler) {
                return function (view) {
                    return renderer(function ($var18) {
                        return handler(function (arg0) {
                            return new NavigationAction("Message", [arg0]);
                        }($var18));
                    })(view);
                };
            };

            return renderer_;
        };

        var createRenderer_ = function createRenderer_(sel) {
            return function (handler) {
                return function (view) {
                    return mapRenderer(createRenderer(sel)(function ($var19) {
                        return handler(function (arg0) {
                            return new NavigationAction("Message", [arg0]);
                        }($var19));
                    })(view));
                };
            };
        };

        return createRenderer_;
    };

    var createRenderer = mapCreateRenderer(app.CreateRenderer);
    return new Types.AppSpecification(app.InitState, app.View, update_, initMessage, createRenderer, app.NodeSelector, producers, subscribers);
}
//# sourceMappingURL=Fable.Arch.Navigation.js.map