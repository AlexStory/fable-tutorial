{"version":3,"sources":["../../fable-arch/src/Fable.Arch/Fable.Arch.React.fs"],"names":[],"mappings":";;;;;;;;;;;;;AAYO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,4BAAoC;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAApC;AAAA;AAGG;AAMJ,0BAAW,WAAW;AAAA;AAAS,aAApB,CAAX;AATC;AAAoC;AAAI;;AAAxC;AAAA;AAAA,+BAWG;AAAA;AAAe;AAXlB;AAAA;AAAA,+BAcG;AAAA;AAA8B;AAdjC;AAAA;AAAA,oCAMS;AAAA,6BAEC;AAAA;AAAmB,iBAFpB,MACK;AAAA;AAAuB;AADrB;AANhB;;AAAA;AAAA;;AAHF;AAAA;AAQc,CARd;AAmBH,OACY;AAAA;;AAER;AAAA;AACA;AACa;AAAA;AAAA;AAAc,KAF3B;;AAIa;AACN,6CAA+C;AAAA;AAAA,KAA/C;AACX;AAGA;AAAA;AAAA;AAA2B,SAA3B;AAAA;AAXoB","file":"Fable.Arch.React.js","sourcesContent":["module Fable.Arch.React\n\nopen Fable.Core\nopen Fable.Core.JsInterop\nopen System.Diagnostics\nopen Fable.Import.React\n\ntype MkView<'model> = ('model->unit) -> ('model->ReactElement)\ntype [<Pojo>] Props<'model> = {\n    main:MkView<'model>\n}\n\nmodule Components =\n    let mutable internal mounted = false\n\n    type App<'model>(props:Props<'model>) as this =\n        inherit Component<Props<'model>,obj>(props)\n        do\n            mounted <- false\n\n        let safeState state =\n            match mounted with\n            | false -> this.setInitState state\n            | _ -> this.setState state\n        let view = props.main safeState\n        member this.componentDidMount() =\n            mounted <- true\n\n        member this.render () =\n            view(unbox<'model> this.state)\n\nlet createRenderer viewFn initModel sel h v =\n    let mutable setState = None\n    let main s =\n        setState <- Some s\n        s initModel\n        fun model -> viewFn model h\n\n    let targetNode = Fable.Import.Browser.document.body.querySelector(sel)\n    let comp = Fable.Helpers.React.com<Components.App<_>,_,_> {main = main} []\n    Fable.Import.ReactDom.render(comp,targetNode)\n\n    fun hand vm ->\n    (setState |> Option.get) vm"]}