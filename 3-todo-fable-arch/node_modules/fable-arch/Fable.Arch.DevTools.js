var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { setType } from "fable-core/Symbol";
import _Symbol from "fable-core/Symbol";
import { toString, toPlainJsObj, compareUnions, equalsUnions, Tuple, makeGeneric, Option, compareRecords, equalsRecords, GenericParam } from "fable-core/Util";
import { filter, map, ofArray, append } from "fable-core/List";
import List from "fable-core/List";
import { create, add, tryFind } from "fable-core/Map";
import _Map from "fable-core/Map";
import { exists, range, map as map_1, toList, last, fold } from "fable-core/Seq";
import { fsFormat, newGuid } from "fable-core/String";
import { Events, Attributes, Tags } from "./Fable.Arch.Html";
import { getType, getTypeFullName } from "fable-core/Reflection";
import { AppApi, Types } from "./Fable.Arch.App";
import { start } from "fable-core/MailboxProcessor";
import { singleton } from "fable-core/AsyncBuilder";
import GenericComparer from "fable-core/GenericComparer";
import { createRender } from "./Fable.Arch.Virtualdom";
export var ActionItem = function () {
    function ActionItem(id, excluded, message, state) {
        _classCallCheck(this, ActionItem);

        this.Id = id;
        this.Excluded = excluded;
        this.Message = message;
        this.State = state;
    }

    _createClass(ActionItem, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "Fable.Arch.DevTools.ActionItem",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    Id: "string",
                    Excluded: "boolean",
                    Message: GenericParam("TAppMessage"),
                    State: GenericParam("TAppModel")
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return ActionItem;
}();
setType("Fable.Arch.DevTools.ActionItem", ActionItem);
export var DevToolsModel = function () {
    function DevToolsModel(base, lastCommited, actions, collapsed, pushToApp) {
        _classCallCheck(this, DevToolsModel);

        this.Base = base;
        this.LastCommited = lastCommited;
        this.Actions = actions;
        this.Collapsed = collapsed;
        this.PushToApp = pushToApp;
    }

    _createClass(DevToolsModel, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "Fable.Arch.DevTools.DevToolsModel",
                interfaces: ["FSharpRecord"],
                properties: {
                    Base: GenericParam("TAppModel"),
                    LastCommited: Option(GenericParam("TAppModel")),
                    Actions: makeGeneric(List, {
                        T: makeGeneric(ActionItem, {
                            TAppMessage: GenericParam("TAppMessage"),
                            TAppModel: GenericParam("TAppModel")
                        })
                    }),
                    Collapsed: makeGeneric(_Map, {
                        Key: "string",
                        Value: "boolean"
                    }),
                    PushToApp: "function"
                }
            };
        }
    }]);

    return DevToolsModel;
}();
setType("Fable.Arch.DevTools.DevToolsModel", DevToolsModel);
export var DevToolsMessage = function () {
    function DevToolsMessage(caseName, fields) {
        _classCallCheck(this, DevToolsMessage);

        this.Case = caseName;
        this.Fields = fields;
    }

    _createClass(DevToolsMessage, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "Fable.Arch.DevTools.DevToolsMessage",
                interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
                cases: {
                    AddMessage: [GenericParam("TAppMessage"), GenericParam("TAppModel")],
                    Commit: [],
                    MessagesReplayed: [makeGeneric(List, {
                        T: Tuple(["string", GenericParam("TAppModel")])
                    })],
                    Reset: [],
                    Revert: [],
                    Sweep: [],
                    ToggleAction: ["string"],
                    ToggleObjectVisibility: ["string"]
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsUnions(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareUnions(this, other);
        }
    }]);

    return DevToolsMessage;
}();
setType("Fable.Arch.DevTools.DevToolsMessage", DevToolsMessage);
export function isCollapsed(str, model) {
    return fold(function (x, y) {
        return x ? true : y;
    }, false, function () {
        var $var14 = function (table) {
            return tryFind(str, table);
        }(model.Collapsed);

        if ($var14 != null) {
            return [$var14];
        } else {
            return [];
        }
    }());
}
export function devToolsUpdate(model, action) {
    var patternInput = action.Case === "AddMessage" ? [function () {
        var Actions = append(model.Actions, ofArray([new ActionItem(newGuid(), false, action.Fields[0], action.Fields[1])]));
        return new DevToolsModel(model.Base, model.LastCommited, Actions, model.Collapsed, model.PushToApp);
    }(), new List()] : action.Case === "MessagesReplayed" ? function () {
        var actions = fold(function (s, tupledArg) {
            return map(function (a) {
                return a.Id === tupledArg[0] ? new ActionItem(a.Id, a.Excluded, a.Message, tupledArg[1]) : a;
            }, s);
        }, model.Actions, action.Fields[0]);
        return [new DevToolsModel(model.Base, model.LastCommited, actions, model.Collapsed, model.PushToApp), new List()];
    }() : action.Case === "ToggleObjectVisibility" ? function () {
        var currentValue = isCollapsed(action.Fields[0], model);
        return [function () {
            var Collapsed = function () {
                var value = !currentValue;
                return function (table) {
                    return add(action.Fields[0], value, table);
                };
            }()(model.Collapsed);

            return new DevToolsModel(model.Base, model.LastCommited, model.Actions, Collapsed, model.PushToApp);
        }(), new List()];
    }() : action.Case === "ToggleAction" ? function () {
        var actions = map(function (i) {
            return i.Id === action.Fields[0] ? function () {
                var Excluded = !i.Excluded;
                return new ActionItem(i.Id, Excluded, i.Message, i.State);
            }() : i;
        }, model.Actions);
        var m_ = new DevToolsModel(model.Base, model.LastCommited, actions, model.Collapsed, model.PushToApp);
        var actionsToReplay = map(function (i) {
            return [i.Id, i.Message];
        }, filter(function (i) {
            return !i.Excluded;
        }, m_.Actions));
        var currentBase = m_.LastCommited != null ? m_.LastCommited : m_.Base;
        var messages = ofArray([function (h) {
            model.PushToApp([currentBase, actionsToReplay]);
        }]);
        return [m_, messages];
    }() : action.Case === "Sweep" ? function () {
        var actions = filter(function (i) {
            return !i.Excluded;
        }, model.Actions);
        return [new DevToolsModel(model.Base, model.LastCommited, actions, model.Collapsed, model.PushToApp), new List()];
    }() : action.Case === "Revert" ? model.LastCommited == null ? [model, new List()] : [function () {
        var Actions = new List();
        return new DevToolsModel(model.Base, model.LastCommited, Actions, model.Collapsed, model.PushToApp);
    }(), ofArray([function (h) {
        model.PushToApp([model.LastCommited, new List()]);
    }])] : action.Case === "Reset" ? [function () {
        var Actions = new List();
        var LastCommited = null;
        return new DevToolsModel(model.Base, LastCommited, Actions, model.Collapsed, model.PushToApp);
    }(), ofArray([function (h) {
        model.PushToApp([model.Base, new List()]);
    }])] : function () {
        var latestCommited = last(model.Actions).State;
        return [function () {
            var LastCommited = latestCommited;
            var Actions = new List();
            return new DevToolsModel(model.Base, LastCommited, Actions, model.Collapsed, model.PushToApp);
        }(), ofArray([function (h) {
            model.PushToApp([latestCommited, new List()]);
        }])];
    }();
    return [patternInput[0], patternInput[1]];
}
export var cssString = "\n    ._fable_dev_tools {\n        background-color: #2d2a2a;\n        position: fixed;\n        top: 0;\n        right: 0;\n        min-width: 400px;\n        height: 100%;\n        font-family: 'Open Sans', sans-serif;\n        color: #e0e0e0;\n        z-index: 1000;\n    }\n    ._fable_dev_tools ul {\n        padding: 0;\n        margin: 0;\n        list-style: none;\n    }\n    ._fable_dev_tools .actions {\n        margin-bottom: 5px;\n    }\n    ._fable_dev_tools .actions li {\n        color: #565656;\n        display: inline-block;\n        width: 90px;\n        text-align:center;\n        padding-top: 5px;\n        padding-bottom: 5px;\n        margin-left: 5px;\n        margin-right: 5px;\n        font-weight: bold;\n    }\n    ._fable_dev_tools .actions li.active {\n        background-color: #565656;\n        color: #e0e0e0;\n        cursor: pointer;\n    }\n\n    ._fable_dev_tools .action-list {\n        margin: 0px;\n        padding: 0px;\n        margin-left: 0px;\n        overflow-y: auto;\n        height: 100%;\n    }\n\n    ._fable_dev_tools .action-list .row {\n        margin: 0px;\n    }\n    ._fable_dev_tools .action-list .row.excluded .content {\n        display: none;\n    }\n\n    ._fable_dev_tools .action-list .row.excluded .header {\n        background-color: #343434;\n        color: #565656;\n        text-decoration: line-through;\n    }\n\n    ._fable_dev_tools .action-list .header {\n        padding: 15px;\n        background-color: #565656;\n        width: 100%;\n    }\n\n    ._fable_dev_tools .action-list .header.action {\n        cursor: pointer;\n    }\n\n    ._fable_dev_tools .action-list .content {\n        padding-top: 10px;\n        padding-bottom: 10px;\n    }\n\n    ._fable_dev_tools .action-list .item {\n        padding-left: 15px;    \n    }\n\n    ._fable_dev_tools .action-list .row:last-child {\n        margin-bottom: 40px;\n    }\n\n    ._fable_dev_tools .action-list .item .item-header.expand-collapse {\n        cursor: pointer;\n        margin-left: 15px;\n    }\n\n    ._fable_dev_tools .action-list .item .item-header.expand-collapse::before {\n        content: \"\\25BA\";\n        position: relative;\n        font-size: 10px;\n        margin-left: -15px;\n        margin-top: 3px;\n        transform: rotate(90deg);\n        transition-property: transform;\n        transition-duration: 0.3s;\n        display: inline-block;\n        padding-right: 5px;\n    }\n\n    ._fable_dev_tools .action-list .item.collapsed .item-header.expand-collapse::before {\n        transform: rotate(0deg);\n        transition-property: transform;\n        transition-duration: 0.3s;\n    }\n\n    ._fable_dev_tools .action-list .item.collapsed .item-value {\n        display: none;\n    }\n\n    ._fable_dev_tools .item .item-short-value.string {\n        color: #345678;\n    }\n\n    ._fable_dev_tools .item .item-short-value.number {\n        color: #876543;\n    }\n\n    ._fable_dev_tools .item .item-short-value.array {\n        color: #9356ab;\n    }\n\n    ._fable_dev_tools .item .item-short-value.object {\n        color: #ab9356;\n    }\n\n    ._fable_dev_tools .item .item-short-value.bool {\n        color: #93ab56;\n    }\n";
export function devToolsView(model) {
    var pluralize = function pluralize(str) {
        return function (count) {
            return count !== 1 ? fsFormat("%s%s")(function (x) {
                return x;
            })(str)("s") : str;
        };
    };

    var getMessageTitle = function getMessageTitle(o) {
        var x = toPlainJsObj(o);
        return fsFormat("%s")(function (x) {
            return x;
        })(toString(x.Case));
    };

    var renderThing = function renderThing(thingName) {
        return function (parentId) {
            return function (o) {
                var thisId = fsFormat("%s_%s")(function (x) {
                    return x;
                })(parentId)(thingName);
                var collapsed = isCollapsed(thisId, model);
                var extraClass = collapsed ? " collapsed" : "";

                var renderChildren = function renderChildren(propertyNames) {
                    return function (o_1) {
                        return toList(map_1(function (y) {
                            return function () {
                                var clo0 = renderThing;
                                return function (arg00) {
                                    var clo1 = clo0(arg00);
                                    return function (arg10) {
                                        var clo2 = clo1(arg10);
                                        return function (arg20) {
                                            return clo2(arg20);
                                        };
                                    };
                                };
                            }()(y)(thisId)(o_1[y]);
                        }, propertyNames));
                    };
                };

                var renderValue = function renderValue(thingName_1) {
                    return function (typeName) {
                        return function (value) {
                            return Tags.div(ofArray([Attributes.attribute("class", "item-value")]))(ofArray([Tags.span(ofArray([Attributes.attribute("class", "item-name")]))(ofArray([Tags.text(fsFormat("%s: ")(function (x) {
                                return x;
                            })(thingName_1))])), Tags.span(ofArray([Attributes.attribute("class", fsFormat("item-short-value %s")(function (x) {
                                return x;
                            })(typeName))]))(ofArray([Tags.text(value)]))]));
                        };
                    };
                };

                var header = function header(thingName_1) {
                    return function (collapseable) {
                        return function (onClicked) {
                            return function (typeName) {
                                return function (value) {
                                    var headerClass = collapseable ? "item-header expand-collapse" : "item-header";
                                    var headerAttributes = new List(Attributes.attribute("class", headerClass), onClicked != null ? ofArray([Events.onMouseClick(onClicked)]) : new List());
                                    return Tags.div(headerAttributes)(ofArray([Tags.span(ofArray([Attributes.attribute("class", "item-key")]))(ofArray([Tags.text(fsFormat("%s: ")(function (x) {
                                        return x;
                                    })(thingName_1))])), Tags.span(ofArray([Attributes.attribute("class", fsFormat("item-short-value %s")(function (x) {
                                        return x;
                                    })(typeName))]))(ofArray([Tags.text(value)]))]));
                                };
                            };
                        };
                    };
                };

                var renderComplexType = function renderComplexType(t) {
                    return function (keys) {
                        return function (typeName) {
                            return function (o_1) {
                                var length = keys.length;
                                var itemWord = t === "object" ? "key" : "item";
                                var headerText = fsFormat("%s (%i %s) ")(function (x) {
                                    return x;
                                })(typeName)(length)(pluralize(itemWord)(length));
                                return ofArray([header(thingName)(true)(function (_arg1) {
                                    return new DevToolsMessage("ToggleObjectVisibility", [thisId]);
                                })(t)(headerText), Tags.div(ofArray([Attributes.attribute("class", "item-value")]))(function () {
                                    var clo0 = renderChildren;
                                    return function (arg00) {
                                        var clo1 = clo0(arg00);
                                        return function (arg10) {
                                            return clo1(arg10);
                                        };
                                    };
                                }()(keys)(o_1))]);
                            };
                        };
                    };
                };

                var renderItem = function renderItem(children) {
                    return Tags.div(ofArray([Attributes.attribute("class", fsFormat("item%s")(function (x) {
                        return x;
                    })(extraClass)), Attributes.attribute("id", thisId)]))(children);
                };

                var valueOnly = function valueOnly(typeName) {
                    return function (value) {
                        return header(thingName)(false)()(typeName)(toString(value));
                    };
                };

                return renderItem(o == null ? ofArray([valueOnly("")(o)]) : getTypeFullName(getType(o), "name") === "FSharpList" ? function () {
                    var list = function () {
                        var x = [];
                        o.mapIndexed(function (idx, item) {
                            x[idx] = item;
                        });
                        return x;
                    }();

                    return renderComplexType("array")(map(function (value) {
                        return String(value);
                    }, toList(range(0, Number.parseInt(toString(list.length)) - 1))))("FSharpList")(list);
                }() : o instanceof Array ? renderComplexType("array")(map(function (value) {
                    return String(value);
                }, toList(range(0, Number.parseInt(toString(o.length)) - 1))))(getTypeFullName(getType(o), "name"))(o) : o instanceof Object ? renderComplexType("object")(toList(Object.getOwnPropertyNames(o)))(getTypeFullName(getType(o), "name"))(o) : o != undefined && o.constructor === Number ? ofArray([valueOnly("number")(o)]) : o != undefined && o.constructor === String ? ofArray([valueOnly("string")(o)]) : o != undefined && o.constructor === Boolean ? ofArray([valueOnly("bool")(o)]) : ofArray([valueOnly("???")(o)]));
            };
        };
    };

    var toolStyles = Tags.style(new List())(ofArray([Tags.text(cssString), Tags.link(ofArray([Attributes.attribute("href", "https://fonts.googleapis.com/css?family=Open+Sans:400,400i,700,700i"), Attributes.attribute("rel", "stylesheet")]))]));

    var toolHeader = function toolHeader(model_1) {
        var headerAction = function headerAction(headerText) {
            return function (func) {
                return func != null ? Tags.li(ofArray([Attributes.attribute("class", "active"), Events.onMouseClick(function (_arg2) {
                    return func;
                })]))(ofArray([Tags.text(headerText)])) : Tags.li(new List())(ofArray([Tags.text(headerText)]));
            };
        };

        var excluded = exists(function (i) {
            return i.Excluded;
        }, model_1.Actions);
        var anyNotExcluded = exists(function (i) {
            return !i.Excluded;
        }, model_1.Actions);
        var isCommited = model_1.LastCommited != null;
        var anyActions = !(model_1.Actions.tail == null);
        return Tags.header(ofArray([Attributes.attribute("class", "actions")]))(ofArray([Tags.ul(new List())(ofArray([headerAction("Reset")((anyActions ? true : isCommited) ? new DevToolsMessage("Reset", []) : null), headerAction("Revert")((isCommited ? anyActions : false) ? new DevToolsMessage("Revert", []) : null), headerAction("Sweep")(excluded ? new DevToolsMessage("Sweep", []) : null), headerAction("Commit")(anyNotExcluded ? new DevToolsMessage("Commit", []) : null)]))]));
    };

    var row = function row(headerText) {
        return function (headerClicked) {
            return function (excluded) {
                return function (content) {
                    var rowClass = excluded ? "row excluded" : "row";
                    var headerAttributes = headerClicked == null ? ofArray([Attributes.attribute("class", "header")]) : ofArray([Events.onMouseClick(headerClicked), Attributes.attribute("class", "header action")]);
                    var inner = new List(Tags.div(headerAttributes)(ofArray([Tags.text(headerText)])), excluded ? new List() : ofArray([Tags.div(ofArray([Attributes.attribute("class", "content")]))(ofArray([content]))]));
                    return Tags.div(ofArray([Attributes.attribute("class", rowClass)]))(inner);
                };
            };
        };
    };

    var renderAction = function renderAction(a) {
        var toggleAction = function toggleAction(_arg3) {
            return new DevToolsMessage("ToggleAction", [a.Id]);
        };

        var content = Tags.div(new List())(ofArray([function () {
            var clo0 = renderThing;
            return function (arg00) {
                var clo1 = clo0(arg00);
                return function (arg10) {
                    var clo2 = clo1(arg10);
                    return function (arg20) {
                        return clo2(arg20);
                    };
                };
            };
        }()("action")(fsFormat("_action_%s")(function (x) {
            return x;
        })(a.Id))(a.Message), function () {
            var clo0 = renderThing;
            return function (arg00) {
                var clo1 = clo0(arg00);
                return function (arg10) {
                    var clo2 = clo1(arg10);
                    return function (arg20) {
                        return clo2(arg20);
                    };
                };
            };
        }()("state")(fsFormat("_state_%s")(function (x) {
            return x;
        })(a.Id))(a.State)]));
        return row(getMessageTitle(a.Message))(toggleAction)(a.Excluded)(content);
    };

    var toolContent = function toolContent(model_1) {
        var currentBase = model_1.LastCommited != null ? model_1.LastCommited : model_1.Base;
        var baseState = row("BASE")()(false)(function () {
            var clo0 = renderThing;
            return function (arg00) {
                var clo1 = clo0(arg00);
                return function (arg10) {
                    var clo2 = clo1(arg10);
                    return function (arg20) {
                        return clo2(arg20);
                    };
                };
            };
        }()("model")("_base")(currentBase));
        var actions = map(renderAction, model_1.Actions);
        return Tags.div(ofArray([Attributes.attribute("class", "action-list")]))(new List(baseState, actions));
    };

    return Tags.div(ofArray([Attributes.attribute("class", "_fable_dev_tools")]))(ofArray([toolStyles, toolHeader(model), toolContent(model)]));
}
export var LinkMessage = function () {
    function LinkMessage(caseName, fields) {
        _classCallCheck(this, LinkMessage);

        this.Case = caseName;
        this.Fields = fields;
    }

    _createClass(LinkMessage, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "Fable.Arch.DevTools.LinkMessage",
                interfaces: ["FSharpUnion"],
                cases: {
                    Push: [makeGeneric(Types.AppMessage, {
                        TMessage: GenericParam("TMessage"),
                        TModel: GenericParam("TModel")
                    })],
                    SetHandler: ["function"]
                }
            };
        }
    }]);

    return LinkMessage;
}();
setType("Fable.Arch.DevTools.LinkMessage", LinkMessage);
export var LinkState = function () {
    function LinkState(handler) {
        _classCallCheck(this, LinkState);

        this.Handler = handler;
    }

    _createClass(LinkState, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "Fable.Arch.DevTools.LinkState",
                interfaces: ["FSharpRecord"],
                properties: {
                    Handler: "function"
                }
            };
        }
    }]);

    return LinkState;
}();
setType("Fable.Arch.DevTools.LinkState", LinkState);
export function createDevTools(pluginId, initModel) {
    var containerNode = window.document.createElement("div");
    containerNode.id = "___devtools";
    window.document.body.appendChild(containerNode);
    var linkAgent = start(function (inbox) {
        var loop = function loop(state) {
            return function (builder_) {
                return builder_.Delay(function () {
                    return builder_.Bind(inbox.receive(), function (_arg1) {
                        return _arg1.Case === "SetHandler" ? builder_.ReturnFrom(loop(new LinkState(_arg1.Fields[0]))) : function () {
                            state.Handler(_arg1.Fields[0]);
                            return builder_.ReturnFrom(loop(state));
                        }();
                    });
                });
            }(singleton);
        };

        return loop(new LinkState(function (_arg1) {}));
    });

    var devToolsAgent = function () {
        var initModel_1 = function () {
            var Actions = new List();
            var Collapsed = create(null, new GenericComparer(function (x, y) {
                return x < y ? -1 : x > y ? 1 : 0;
            }));
            return new DevToolsModel(initModel, null, Actions, Collapsed, function (m) {
                linkAgent.post(new LinkMessage("Push", [function (tupledArg) {
                    return new Types.AppMessage("Replay", [tupledArg[0], tupledArg[1]]);
                }(m)]));
            });
        }();

        return AppApi.start(AppApi.withStartNodeSelector("#___devtools", AppApi.createApp(initModel_1, function (model) {
            return devToolsView(model);
        }, function (model) {
            return function (action) {
                return devToolsUpdate(model, action);
            };
        }, function (selector) {
            return function (handler) {
                return function (view) {
                    return createRender(selector, handler, view);
                };
            };
        })));
    }();

    return new Types.Plugin(function (h) {
        linkAgent.post(new LinkMessage("SetHandler", [h]));
    }, function (_arg2) {
        if (_arg2.Case === "ModelChanged") {
            devToolsAgent(new Types.AppMessage("Message", [new DevToolsMessage("AddMessage", [_arg2.Fields[0].Message, _arg2.Fields[0].CurrentState])]));
        } else {
            if (_arg2.Case === "Replayed") {
                devToolsAgent(new Types.AppMessage("Message", [new DevToolsMessage("MessagesReplayed", [_arg2.Fields[0]])]));
            }
        }
    });
}
//# sourceMappingURL=Fable.Arch.DevTools.js.map